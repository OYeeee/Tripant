<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="mclass.store.tripant.diary.model.repository.DiaryRepository">

	<resultMap type="DiaryBoardEntity" id="DiaryBoardEntityMap">
		<result property="diaryContent" column="DIARY_CONTENT"
			jdbcType="CLOB" javaType="java.lang.String" />
	</resultMap>

	<!--전체글 리스트 목록 뿌리기 -->
	<!--최신순 정렬 (diary_date_real 별칭사용) -->
	<!-- 여행기는 공개글이기 때문에 diaryOpen == '0 -->
	<select id="selectDiaryList" resultType="DiaryBoardEntity"
		parameterType="map">
		select
		<if test="memEmail != null and !memEmail.equals('') ">
			(SELECT COUNT(t1.DIARY_ID) FROM diary_likes t1 WHERE
			t1.DIARY_ID =
			t2.DIARY_ID and t1.mem_email =#{memEmail}) is_my_likes,
		</if>
		t2.*
		from
		( select t1.*, rownum rn from
		(SELECT DIARY_ID, MEM_NICK,
		DIARY_TITLE,
		to_char(DIARY_DATE,'yyyy-MM-dd') DIARY_DATE,
		DIARY_VIEWS,
		DIARY_THEME, PLAN_AREA_CODE,
		DBMS_LOB.SUBSTR(DIARY_CONTENT, 1000)
		DIARY_CONTENT
		, DIARY_OPEN , DIARY_PLAN_ID , DIARY_MEM_EMAIL
		,
		diary_date diary_date_real
		FROM VIEW_DIARY_MEMBER_PLAN
		WHERE
		DIARY_OPEN =
		0
		<if test="areaname != null and !areaname.equals('') ">
			AND PLAN_AREA_CODE = (SELECT AREA_CODE FROM AREA WHERE
			AREA_SHORT_NAME =
			#{areaname})
		</if>
		ORDER BY diary_date_real DESC NULLS LAST
		) t1
		)t2 where rn between 1 and
		#{maxNum}
	</select>
	<!--최신순 정렬 (diary_date_real 별칭사용) -->
	<select id="selectLatest" resultType="DiaryBoardEntity"
		parameterType="map">
		select
		<if test="memEmail != null and !memEmail.equals('') ">
			(SELECT COUNT(t1.DIARY_ID) FROM diary_likes t1 WHERE
			t1.DIARY_ID =
			t2.DIARY_ID and t1.mem_email =#{memEmail}) is_my_likes,
		</if>
		t2.*
		from
		( select t1.*, rownum rn from
		(SELECT DIARY_ID, MEM_NICK,
		DIARY_TITLE,
		to_char(DIARY_DATE,'yyyy-MM-dd') DIARY_DATE,
		DIARY_VIEWS,
		DIARY_THEME, PLAN_AREA_CODE,
		DBMS_LOB.SUBSTR(DIARY_CONTENT, 1000)
		DIARY_CONTENT
		, DIARY_OPEN , DIARY_PLAN_ID , DIARY_MEM_EMAIL
		,
		diary_date diary_date_real
		FROM VIEW_DIARY_MEMBER_PLAN
		WHERE
		DIARY_OPEN =
		0
		<if test="areaname != null and !areaname.equals('') ">
			AND PLAN_AREA_CODE = (SELECT AREA_CODE FROM AREA WHERE
			AREA_SHORT_NAME =
			#{areaname})
		</if>
		ORDER BY diary_date_real DESC NULLS LAST
		) t1
		)t2 where rn between 1 and
		#{maxNum}
	</select>
	<!-- 좋아요 정렬(likes ) -->
	<select id="selectLikesPopular" resultType="DiaryBoardEntity"
		parameterType="map">
		select
		<if test="memEmail != null and !memEmail.equals('') ">
			(SELECT COUNT(t1.DIARY_ID) FROM diary_likes t1 WHERE
			t1.DIARY_ID =
			t2.DIARY_ID and t1.mem_email =#{memEmail}) is_my_likes,
		</if>
		t2.*
		from
		( select t1.*, rownum rn from
		(SELECT DIARY_ID, MEM_NICK,
		DIARY_TITLE,
		to_char(DIARY_DATE,'yyyy-MM-dd') DIARY_DATE,
		NVL(likes,0)
		likes,
		DIARY_VIEWS, DIARY_THEME, PLAN_AREA_CODE,
		DBMS_LOB.SUBSTR(DIARY_CONTENT, 1000) DIARY_CONTENT
		, DIARY_OPEN ,
		DIARY_PLAN_ID , DIARY_MEM_EMAIL
		, diary_date diary_date_real
		FROM
		VIEW_DIARY_MEMBER_PLAN
		LEFT OUTER JOIN (select count (mem_email) likes,
		diary_id from diary_likes
		group by diary_id) USING (diary_id)
		WHERE
		DIARY_OPEN = 0
		<if test="areaname != null and !areaname.equals('') ">
			AND PLAN_AREA_CODE = (SELECT AREA_CODE FROM AREA WHERE
			AREA_SHORT_NAME =
			#{areaname})
		</if>
		ORDER BY likes DESC NULLS LAST
		) t1
		)t2 where rn between 1 and #{maxNum}
	</select>
	<!--조회수 정렬 (diary_views) -->
	<select id="selectViewsPopular" resultType="DiaryBoardEntity"
		parameterType="map">
		select
		<if test="memEmail != null and !memEmail.equals('') ">
			(SELECT COUNT(t1.DIARY_ID) FROM diary_likes t1 WHERE
			t1.DIARY_ID =
			t2.DIARY_ID and t1.mem_email =#{memEmail}) is_my_likes,
		</if>
		t2.*
		from
		( select t1.*, rownum rn from
		(SELECT DIARY_ID, MEM_NICK,
		DIARY_TITLE,
		to_char(DIARY_DATE,'yyyy-MM-dd') DIARY_DATE,
		DIARY_VIEWS,
		DIARY_THEME, PLAN_AREA_CODE,
		DBMS_LOB.SUBSTR(DIARY_CONTENT, 1000)
		DIARY_CONTENT
		, DIARY_OPEN , DIARY_PLAN_ID , DIARY_MEM_EMAIL
		,
		diary_date diary_date_real
		FROM VIEW_DIARY_MEMBER_PLAN
		WHERE
		DIARY_OPEN =
		0
		<if test="areaname != null and !areaname.equals('') ">
			AND PLAN_AREA_CODE = (SELECT AREA_CODE FROM AREA WHERE
			AREA_SHORT_NAME =
			#{areaname})
		</if>
		ORDER BY DIARY_VIEWS DESC NULLS LAST
		) t1
		)t2 where rn between 1 and
		#{maxNum}
	</select>

	<!-- 나의 글리스트 목록 뿌리기 -->
	<select id="selectMyDiaryList" resultType="DiaryBoardEntity"
		parameterType="map">
		select * from
		( select t1.*, rownum rn from
		(SELECT
		DIARY_ID, MEM_NICK, DIARY_TITLE,
		to_char(DIARY_DATE,'yyyy-MM-dd')
		DIARY_DATE,
		DIARY_VIEWS, DIARY_THEME, PLAN_AREA_CODE,
		DBMS_LOB.SUBSTR(DIARY_CONTENT, 1000) DIARY_CONTENT
		, DIARY_OPEN ,
		DIARY_PLAN_ID , DIARY_MEM_EMAIL
		, diary_date diary_date_real
		FROM
		VIEW_DIARY_MEMBER_PLAN
		WHERE DIARY_MEM_EMAIL = #{email}
		ORDER BY
		diary_date_real DESC NULLS LAST
		) t1
		) where rn between #{maxNum}-3 and
		#{maxNum}
	</select>

	<!-- 글 작성 등록 시키기 -->
	<insert id="insertDiary" parameterType="DiaryBoardEntity">
		INSERT INTO diary (
		DIARY_ID, DIARY_MEM_EMAIL,
		DIARY_PLAN_ID,
		DIARY_TITLE,
		DIARY_CONTENT,
		DIARY_DATE, DIARY_OPEN,
		DIARY_VIEWS,
		DIARY_THEME)
		VALUES
		(diary_seq.NEXTVAL, #{diaryMemEmail},
		#{diaryPlanId}, #{diaryTitle},
		<!-- <foreach collection="diaryContentArrList" item="content4000" separator="||" 
			close=","> to_clob(#{content4000}) </foreach> NVL(#{diaryContent:CLOB}, EMPTY_CLOB()), 
			oracle -->
		#{diaryContent},
		default, #{diaryOpen},
		#{diaryViews},
		#{diaryTheme})
	</insert>

	<!-- 특정 ID의 PlAN 조회 -->
	<select id="selectPlanById" parameterType="string"
		resultType="WritePlanTitleEntity">
		SELECT plan_id AS planId, plan_title AS planTitle
		FROM
		view_plan_member
		WHERE mem_email = #{MemEmail}
	</select>

	<!-- 특정 ID의 다이어리 조회 -->
	<select id="selectDiaryById" parameterType="int"
		resultMap="DiaryBoardEntityMap">
		<!-- view_diary_member의 nick_name -->
		SELECT * FROM view_diary_member WHERE DIARY_ID = #{diaryId}
	</select>
	<!-- 한개의 여행기에 여러명의 이메일 계정들이 누른 하트 개수 -->
	<select id="selectDiaryLike" parameterType="int"
		resultType="_int">
		SELECT COUNT(*) likes
		FROM diary_likes
		WHERE DIARY_ID =
		#{diaryId}
	</select>


	<!-- 조회수 증가 -->
	<update id="incrementDiaryViews" parameterType="int">
		UPDATE diary
		SET
		DIARY_VIEWS = COALESCE(DIARY_VIEWS, 0) + 1
		WHERE DIARY_ID = #{diaryId}
	</update>



	<!-- 글 삭제 -->
	<delete id="deleteDiaryById" parameterType="int">
		DELETE FROM diary
		WHERE DIARY_ID = #{diaryId} AND MEM_EMAIL = #{memEmail}
	</delete>

	<!-- 글 수정 -->
	<update id="updateDiary" parameterType="DiaryPostEntity">
		UPDATE diary
		SET
		DIARY_TITLE = #{diaryTitle},
		DIARY_CONTENT = to_clob(#{diaryContent}),
		DIARY_DATE = #{diaryDate},
		DIARY_OPEN = #{diaryOpen},
		DIARY_THEME =
		#{diaryTheme}
		WHERE DIARY_ID = #{diaryId}
	</update>

	<!-- 좋아요 누르기 -->
	<insert id="insertDiaryLike" parameterType="map">
		INSERT INTO
		DIARY_LIKES (DIARY_ID, MEM_EMAIL)
		VALUES (#{diaryId}, #{memEmail})
	</insert>
	<!--좋아요 해제하기 -->
	<delete id="deleteDiaryLike" parameterType="map">
		DELETE FROM
		DIARY_LIKES
		WHERE DIARY_ID = #{diaryId} AND MEM_EMAIL = #{memEmail}
	</delete>
	<!-- 여행기 글 Previews text 꺼내기 -->
	<select id="previewsText" parameterType="DiaryPostEntity">
		SELECT DIARY_ID,
		DBMS_LOB.SUBSTR(DIARY_CONTENT, 1000, 1) AS DIARY_PREVIEW
		FROM DIARY
		WHERE diary_id = #{diaryId}
	</select>
	<!--글 신고하기 -->
	<insert id="reportSOne" parameterType="ReportsEntity">
		INSERT INTO
		DIARY_REPORTS (DIARY_ID, MEM_EMAIL)
		VALUES (#{diaryId}, #{memEmail})
	</insert>

</mapper>